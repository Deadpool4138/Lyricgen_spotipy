# -*- coding: utf-8 -*-
"""LyricGen_GPT-2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1K98laB5UtYEMl-T92KEhobbbPyYQE4xt
"""

!pip install transformers torch spotipy

#  Step 2: Import Libraries
from transformers import GPT2LMHeadModel, GPT2Tokenizer
import torch
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
import os
import random

#  Step 3: Set Your Spotify Credentials Securely

os.environ['SPOTIPY_CLIENT_ID'] = 'cf49572814e544c9a6bcaf5978b3dd86'
os.environ['SPOTIPY_CLIENT_SECRET'] = '0e69e658798c405daaa866101166cb49'

sp = spotipy.Spotify(auth_manager=SpotifyClientCredentials(
    client_id=os.getenv('SPOTIPY_CLIENT_ID'),
    client_secret=os.getenv('SPOTIPY_CLIENT_SECRET')
))

#  Step 4: Load GPT-2 Large Model and Tokenizer
model_name = "gpt2-large"
tokenizer = GPT2Tokenizer.from_pretrained(model_name)
model = GPT2LMHeadModel.from_pretrained(model_name)
model.eval()

# Set pad_token to eos_token to avoid padding errors
tokenizer.pad_token = tokenizer.eos_token

#  Step 5: Prompt Builder Function
def build_prompt(mood, genre, keywords):
    keyword_str = ', '.join(keywords)
    prompt = (
        f"Write a {genre} song with a {mood} mood.\n"
        f"Include the following keywords: {keyword_str}.\n"
        f"Make the lyrics rhyming and poetic.\n\n"
        f"Verse:\n"
    )
    return prompt

#  Step 6: Generate Lyrics using GPT-2
def generate_lyrics(prompt, max_length=100):
    inputs = tokenizer(prompt, return_tensors='pt', padding=True)
    input_ids = inputs["input_ids"]
    attention_mask = inputs["attention_mask"]

    outputs = model.generate(
        input_ids=input_ids,
        attention_mask=attention_mask,
        max_length=input_ids.shape[1] + max_length,
        temperature=0.9,
        top_k=50,
        top_p=0.95,
        do_sample=True,
        pad_token_id=tokenizer.eos_token_id
    )

    generated = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return generated[len(prompt):].strip().split('\n')[:8]

#  Step 7: Search Spotify for Similar Songs
def search_spotify_song(keywords, limit=3):
    random.shuffle(keywords)
    query = " ".join(keywords)
    results = sp.search(q=query, type='track', limit=limit)
    songs = []
    for track in results['tracks']['items']:
        song_info = {
            "title": track['name'],
            "artist": track['artists'][0]['name'],
            "url": track['external_urls']['spotify']
        }
        songs.append(song_info)
    return songs

#  Step 8: User Input and Execution
mood = input("Enter the mood (e.g., happy, sad, romantic): ")
genre = input("Enter the genre (e.g., pop, rap, rock): ")
keywords_input = input("Enter keywords separated by commas: ")
keywords = [k.strip() for k in keywords_input.split(',')]

prompt = build_prompt(mood, genre, keywords)
lyrics = generate_lyrics(prompt)

print("\nðŸŽ¤ Generated Song Lyrics:\n")
for line in lyrics:
    print(line)

print("\nðŸŽ§ Similar Songs from Spotify:\n")
songs = search_spotify_song(keywords)
for song in songs:
    print(f"ðŸŽ¶ {song['title']} by {song['artist']}")
    print(f"ðŸ”— Link: {song['url']}\n")